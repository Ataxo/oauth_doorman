==Oauth_doorman
composes authentification url, gets google acces_token of user account and gets access to user Google API

===ACCOUNT ADMINISTRATIVE
* 1)Create developer account representing your company if doesn't exist
* 2)This account must have rights to manipulate with user informations, so, let Administrator to enable the Provisioning API
* 3)Register your new Application at https://code.google.com/apis/console/ in API Access tab (This one is always editable for future purposes)

===USING GEM SPECIFICATION

* 1)It's needed to call Doorman initialization with hash config as parameter
necessary keys:: - :redirect_uri (your callback url)
                 - :client_id (generated by google when registering application)
                 - :client_secret (generated by google when registering application)
default keys:: - :scopes => ["https://www.googleapis.com/auth/userinfo.email", "https://apps-apis.google.com/a/feeds/groups/"]
               - :auth_url => "https://accounts.google.com/o/oauth2/auth",
               - :token_url => "https://accounts.google.com/o/oauth2/token",
               - :response_type => "code",
               - :state => "ATAXO",
               - :user_info_url => "https://www.googleapis.com/oauth2/v1/userinfo",
               - :groups_info_url => "https://apps-apis.google.com/a/feeds/group/2.0/%s/?member=%s",
               - :groups_info_auth_header_name => "Authorization",
               - :groups_info_auth_header_content => "OAuth %s",
               - :groups_info_request_timeout => 5
available scopes::  - "https://www.googleapis.com/auth/userinfo.email"
                    - "https://apps-apis.google.com/a/feeds/groups/"
                    - "https://www.googleapis.com/auth/userinfo.profile"
                    - "https://www.google.com/m8/feeds/"
                    - "https://www.google.com/calendar/feeds"
                    - "https://www.googleapis.com/auth/adsense"
                    - "https://www.googleapis.com/auth/gan"
                    - "https://www.googleapis.com/auth/analytics.readonly"
                    - "https://www.googleapis.com/auth/books"
                    - "https://www.googleapis.com/auth/blogger"
                    - "https://www.googleapis.com/auth/devstorage.read_write"
                    - "https://www.google.com/m8/feeds"
                    - "https://www.googleapis.com/auth/structuredcontent"
                    - "https://www.googleapis.com/auth/chromewebstore.readonly"
                    - "https://docs.google.com/feeds"
                    - "https://www.googleapis.com/auth/drive.file"
                    - "https://mail.google.com/mail/feed/atom"
                    - "https://www.googleapis.com/auth/plus.me"
                    - "https://www.googleapis.com/auth/latitude.all.best"
                    - "https://www.googleapis.com/auth/latitude.all.city"
                    - "https://www.googleapis.com/auth/moderator"
                    - "https://www.googleapis.com/auth/orkut"
                    - "https://picasaweb.google.com/data"
                    - "https://sites.google.com/feeds"
                    - "https://spreadsheets.google.com/feeds"
                    - "https://www.googleapis.com/auth/tasks"
                    - "https://www.googleapis.com/auth/urlshortener"
                    - "https://www.google.com/webmasters/tools/feeds"
                    - "https://gdata.youtube.com"
example:: - <b>api = OauthDoorman::Api.new({:redirect_uri => "http://localhost:3000/oauth2callback", :client_id => "123456789.apps.googleusercontent.com", :client_secret => "O1ciRD-F1EX9h8t8LSQlFQk7", :state => "MYSTATE"})</b>
* 2)Redirect to google account gate by calling Doorman's url generator
example:: - <b>url = api.compose_authentification_request_url(false)</b>
          - force_refresh_token determines, whether refresh_token should be returned in your callback method (if true, user is always asked for permission to provide refresh_token)
* 3)Initialize your Doorman instance by code or refresh_token in your callback method (it's the only way to access API methods in the future)
example:: - <b>api.init_connection_by_code(request.params[:code])</b>
          - <b>provisioning_api.init_connection_by_refresh_token("feififjsd756osd-sdfewd435ssd")</b> (in case when you know the refresh_token)
* 4)Call one of API functions
example:: - <b>current_user = api.get_user_email()</b>
          - <b>hash_result = provisioning_api.get_user_groups("ataxo.com", current_user)</b>