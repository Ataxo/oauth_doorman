==Oauth_doorman
composes authentification url, gets google acces_token of user account and gets access to user Google API

===ACCOUNT ADMINISTRATIVE
* 1)Create developer account representing your company if doesn't exist
* 2)This account must have rights to manipulate with user informations, so, let Administrator to enable the Provisioning API
* 3)Register your new Application at https://code.google.com/apis/console/ in API Access tab (This one is always editable for future purposes)

===USING GEM SPECIFICATION
* 1)It's needed to generate url where your application have to be redirected to to ask google for permission. In your controller redirect to the url generated by this function: <b>url = OauthDoorman::OauthSender.compose_authentification_request_url(client_id, redirect_uri, scopes)</b>
client_id:: constant generated in time of registring application
redirect_uri:: your target url, where google answer should be catched (it is needed to be added in Google API Access in Authorized Redirect URIs and Authorized JavaScript Origins fields
include_offline:: flag if refresh_token should be returned
scopes:: represents field of available Google API Web services like:
 "https://www.googleapis.com/auth/userinfo.email"
 "https://apps-apis.google.com/a/feeds/groups/"
 "https://www.googleapis.com/auth/userinfo.profile"
 "https://www.google.com/m8/feeds/"
 "https://www.google.com/calendar/feeds"
 "https://www.googleapis.com/auth/adsense"
 "https://www.googleapis.com/auth/gan"
 "https://www.googleapis.com/auth/analytics.readonly"
 "https://www.googleapis.com/auth/books"
 "https://www.googleapis.com/auth/blogger"
 "https://www.googleapis.com/auth/devstorage.read_write"
 "https://www.google.com/m8/feeds"
 "https://www.googleapis.com/auth/structuredcontent"
 "https://www.googleapis.com/auth/chromewebstore.readonly"
 "https://docs.google.com/feeds"
 "https://www.googleapis.com/auth/drive.file"
 "https://mail.google.com/mail/feed/atom"
 "https://www.googleapis.com/auth/plus.me"
 "https://www.googleapis.com/auth/latitude.all.best"
 "https://www.googleapis.com/auth/latitude.all.city"
 "https://www.googleapis.com/auth/moderator"
 "https://www.googleapis.com/auth/orkut"
 "https://picasaweb.google.com/data"
 "https://sites.google.com/feeds"
 "https://spreadsheets.google.com/feeds"
 "https://www.googleapis.com/auth/tasks"
 "https://www.googleapis.com/auth/urlshortener"
 "https://www.google.com/webmasters/tools/feeds"
 "https://gdata.youtube.com"
* 2)On side of receiver get access_token or refresh_token by calling: <b>access_token, refresh_token = OauthDoorman::OauthReceiver.send_grant_request(request, redirect_uri, client_id, client_secret)</b>, 
client_secret:: you get client_secret from your application settings like client_id
* 3)If you have refresh_token, it's possible to get access_token by calling: <b>get_access_token()</b> method
* 4)After you have received access token, you have permission to use all registred API
in this case you can call UserInfoAPI( <b>get_user_info()</b> ) and DomainGroupsAPI( <b>get_users_of_groups()</b> ) class's methods